close_garage_door:
  alias: Close Garage Door
  mode: single
  sequence:
  - condition: state
    entity_id: binary_sensor.garage_door
    state: 'on'
  - service: switch.turn_on
    entity_id: switch.garage_door_opener
open_garage_door:
  alias: Open Garage Door
  mode: single
  sequence:
  - condition: state
    entity_id: binary_sensor.garage_door
    state: 'off'
  - service: switch.turn_on
    entity_id: switch.garage_door_opener
play_chill_music:
  alias: Play Chill Music
  sequence:
  - service: media_player.turn_on
    target:
      entity_id:
      - media_player.media_room_speakers
      - media_player.family_room_speakers
      - media_player.primary_bedroom_speakers
      - media_player.house_speakers_cast
    data: {}
  - service: media_player.volume_set
    target:
      entity_id:
      - media_player.primary_bedroom_speakers
      - media_player.media_room_speakers
      - media_player.family_room_speakers
      - media_player.house_speakers_cast
    data:
      volume_level: 0.5
  - service: spotcast.start
    data:
      device_name: House Group
      random_song: true
      shuffle: true
      category: 0JQ5DAqbMKFFzDl7qN9Apr
  mode: single
  icon: mdi:music
light_timer:
  alias: Light Timer
  mode: queued
  fields:
    light_entity_id:
      name: Light entity
      description: Which light to operate.
      required: true
      selector:
        entity:
          domain: light
    duration:
      name: Duration
      description: How long the timer should run.
      default: 60
      selector:
        number:
          min: 5
          max: 300
          unit_of_measurement: seconds
    brightness_pct:
      name: Brightness
      description: How bright the light should be when it turns on.
      default: 25
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: '%'
    sensor_entity_ids:
      name: Sensor entities
      description: Array of sensors to monitor
      selector:
        entity:
          domain: binary_sensor
          multiple: true
    on_when:
      name: Turn on when
      description: When this light can automatically turn on.
      default: dark
      selector:
        select:
          options:
          - dark
          - always
          - never
  variables:
    sensor_entity_ids: '{{ [] if sensor_entity_ids is undefined else sensor_entity_ids
      }}'
    sensor_states: "{{ \n  expand('binary_sensor', sensor_entity_ids) | map(attribute='state')
      | list\n}}"
    timer_entity_id: timer.{{ light_entity_id[6:] }}_timer
    brightness: '{{ 25 if brightness_pct is undefined else brightness_pct }}'
    duration: '{{ 60 if duration is undefined else duration }}'
    is_motion: '{{ ''on'' in sensor_states }}'
    is_idle: '{{ is_state(timer_entity_id, ''idle'') }}'
    is_light_on: '{{ is_state(light_entity_id, ''on'') }}'
    is_dark: '{{ is_state(''input_boolean.is_dark_outside'', ''on'') }}'
    on_when: '{{ ''dark'' if on_when is undefined else on_when }}'
    is_allowed_on: '{{ (on_when == ''always'') or (on_when == ''dark'' and is_dark)
      }}'
  sequence:
  - if:
    - condition: template
      value_template: '{{ is_motion and not (is_allowed_on or is_light_on) }}'
    then:
    - stop: Nothing to do.
  - if:
    - condition: template
      value_template: '{{ is_motion and is_idle and is_allowed_on }}'
    then:
    - service: light.turn_on
      data:
        entity_id: '{{ light_entity_id }}'
        brightness_pct: '{{ brightness }}'
        transition: 1
  - if:
    - condition: template
      value_template: '{{ is_motion or not is_idle or is_light_on }}'
    then:
    - service: timer.start
      data:
        entity_id: '{{ timer_entity_id }}'
        duration: '{{ duration }}'
  - if:
    - condition: template
      value_template: '{{ is_motion }}'
    then:
    - service: timer.pause
      data:
        entity_id: '{{ timer_entity_id }}'
  icon: mdi:timer-cog
add_time_network_devices_timer:
  alias: Add Time Network Devices Timer
  sequence:
  - if:
    - condition: state
      entity_id: timer.network_devices_timer
      state: active
    then:
    - service: timer.start
      data_template:
        entity_id: timer.network_devices_timer
        duration: '{% set f = state_attr(''timer.network_devices_timer'', ''finishes_at'')
          %} {% set x = (as_datetime(f) - now()).total_seconds() + (30*60) %}  {{
          x  | timestamp_custom(''%H:%M:%S'', false)}}'
    else:
    - service: timer.start
      data:
        duration: 00:30:00
      target:
        entity_id: timer.network_devices_timer
  mode: single
unlock_main_door:
  alias: Unlock Main Door
  sequence:
  - service: lock.unlock
    data: {}
    target:
      entity_id: lock.main_door_lock
  mode: single
  icon: mdi:door-closed-lock
toggle_media_room_light:
  alias: Toggle Media Room Light
  sequence:
  - if:
    - condition: state
      entity_id: light.media_room_light
      state: 'on'
    then:
    - service: light.turn_off
      data: {}
      target:
        entity_id: light.media_room_light
    else:
    - service: light.turn_on
      data:
        brightness_pct: 5
      target:
        entity_id: light.media_room_light
  mode: single
  icon: mdi:light-recessed
projector_off:
  alias: Projector Off
  sequence:
  - service: remote.send_command
    data:
      device: Formovie X5
      command: Sleep
      delay_secs: 0.4
      num_repeats: 2
    target:
      entity_id: remote.media_room_remote
  mode: single
  icon: mdi:projector-off
