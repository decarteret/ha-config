close_garage_door:
  alias: Close Garage Door
  mode: single
  sequence:
  - condition: state
    entity_id: binary_sensor.garage_door
    state: 'on'
  - service: switch.turn_on
    entity_id: switch.garage_door_opener
open_garage_door:
  alias: Open Garage Door
  mode: single
  sequence:
  - condition: state
    entity_id: binary_sensor.garage_door
    state: 'off'
  - service: switch.turn_on
    entity_id: switch.garage_door_opener
play_chill_music:
  alias: Play Chill Music
  sequence:
  - service: media_player.turn_on
    target:
      entity_id:
      - media_player.media_room_speakers
      - media_player.family_room_speakers
      - media_player.primary_bedroom_speakers
      - media_player.house_speakers_cast
    data: {}
  - service: media_player.volume_set
    target:
      entity_id:
      - media_player.primary_bedroom_speakers
      - media_player.media_room_speakers
      - media_player.family_room_speakers
      - media_player.house_speakers_cast
    data:
      volume_level: 0.5
  - service: spotcast.start
    data:
      device_name: House Group
      random_song: true
      shuffle: true
      category: 0JQ5DAqbMKFFzDl7qN9Apr
  mode: single
  icon: mdi:music
light_timer:
  alias: Light Timer
  mode: queued
  max: 10
  fields:
    light_entity_id:
      name: Light entity
      description: Which light to operate.
      required: true
      selector:
        entity:
          domain: light
    duration:
      name: Duration
      description: How long the timer should run.
      default: 60
      selector:
        number:
          min: 5
          max: 300
          unit_of_measurement: seconds
    brightness_pct:
      name: Brightness
      description: How bright the light should be when it turns on.
      default: 25
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: '%'
    sensor_entity_id:
      name: Sensor entity
      description: Which sensor to monitor
      selector:
        entity:
          domain:
          - binary_sensor
    on_when:
      name: Turn on when
      description: When this light can automatically turn on.
      default: nighttime
      selector:
        select:
          options:
          - nighttime
          - always
          - never
  variables:
    sensor_entity_id: '{{ '''' if sensor_entity_id is undefined else sensor_entity_id
      }}'
    timer_entity_id: timer.{{ light_entity_id[6:] }}_timer
    brightness: '{{ 25 if brightness_pct is undefined else brightness_pct }}'
    duration: '{{ 60 if duration is undefined else duration }}'
    is_motion: '{{ is_state(sensor_entity_id, ''on'') }}'
    is_idle: '{{ is_state(timer_entity_id, ''idle'') }}'
    is_light_on: '{{ is_state(light_entity_id, ''on'') }}'
    is_nighttime: '{{ is_state(''sun.sun'', ''below_horizon'') }}'
    on_when: '{{ ''nighttime'' if on_when is undefined else on_when }}'
    is_allowed_on: '{{ (on_when == ''always'') or (on_when == ''nighttime'' and is_nighttime)
      }}'
  sequence:
  - if:
    - condition: template
      value_template: '{{ is_motion and not is_allowed_on }}'
    then:
    - stop: Not allowed to turn on light.
  - if:
    - condition: template
      value_template: '{{ is_motion and is_idle }}'
    then:
    - service: light.turn_on
      data:
        entity_id: '{{ light_entity_id }}'
        brightness_pct: '{{ brightness }}'
        transition: 1
  - if:
    - condition: template
      value_template: '{{ is_motion or not is_idle or is_light_on }}'
    then:
    - service: timer.start
      data:
        entity_id: '{{ timer_entity_id }}'
        duration: '{{ duration }}'
  - if:
    - condition: template
      value_template: '{{ is_motion }}'
    then:
    - service: timer.pause
      data:
        entity_id: '{{ timer_entity_id }}'
